<ul><li><a class="l" href="#pf4" data-dest-detail='[4,"XYZ",72,733.028,null]'>Foreword</a></li><li><a class="l" href="#pfa" data-dest-detail='[10,"XYZ",72,733.028,null]'>Acronyms</a></li><li><a class="l" href="#pfb" data-dest-detail='[11,"XYZ",72,733.028,null]'>Glossary</a></li><li><a class="l" href="#pfe" data-dest-detail='[14,"XYZ",72,540.919,null]'>I Fundamental concepts</a><ul><li><a class="l" href="#pff" data-dest-detail='[15,"XYZ",72,733.028,null]'>Execution of programs: a 10,000 ft overview</a><ul><li><a class="l" href="#pff" data-dest-detail='[15,"XYZ",72,321.173,null]'>Main components of computers</a><ul><li><a class="l" href="#pf10" data-dest-detail='[16,"XYZ",72,508.879,null]'>The main memory</a></li><li><a class="l" href="#pf10" data-dest-detail='[16,"XYZ",72,216.638,null]'>The CPU</a></li></ul></li><li><a class="l" href="#pf11" data-dest-detail='[17,"XYZ",72,441.109,null]'>Executing program instructions</a></li><li><a class="l" href="#pf12" data-dest-detail='[18,"XYZ",72,263.684,null]'>The boot process</a></li></ul></li><li><a class="l" href="#pf14" data-dest-detail='[20,"XYZ",72,733.028,null]'>Data representation on modern computers</a><ul><li><a class="l" href="#pf14" data-dest-detail='[20,"XYZ",72,464.023,null]'>Numeral systems and the positional notation</a><ul><li><a class="l" href="#pf16" data-dest-detail='[22,"XYZ",72,254.277,null]'>Converting numbers between bases</a></li></ul></li><li><a class="l" href="#pf19" data-dest-detail='[25,"XYZ",72,454.926,null]'>Representing numbers on computers</a><ul><li><a class="l" href="#pf19" data-dest-detail='[25,"XYZ",72,346.492,null]'>Unsigned numbers</a></li><li><a class="l" href="#pf1a" data-dest-detail='[26,"XYZ",72,527.805,null]'>Signed numbers</a></li><li><a class="l" href="#pf1c" data-dest-detail='[28,"XYZ",72,446.243,null]'>Binary arithmetic and overflow</a></li><li><a class="l" href="#pf1d" data-dest-detail='[29,"XYZ",72,180.329,null]'>Integer overflow</a></li></ul></li><li><a class="l" href="#pf1e" data-dest-detail='[30,"XYZ",72,402.697,null]'>Representing text</a></li><li><a class="l" href="#pf1f" data-dest-detail='[31,"XYZ",72,175.153,null]'>Organizing data on the memory</a><ul><li><a class="l" href="#pf20" data-dest-detail='[32,"XYZ",72,707.482,null]'>Texts on the main memory</a></li><li><a class="l" href="#pf20" data-dest-detail='[32,"XYZ",72,196.479,null]'>Numbers on the main memory</a></li><li><a class="l" href="#pf21" data-dest-detail='[33,"XYZ",72,229.527,null]'>Arrays on the main memory</a></li><li><a class="l" href="#pf24" data-dest-detail='[36,"XYZ",72,733.028,null]'>Structs on the main memory</a></li></ul></li><li><a class="l" href="#pf26" data-dest-detail='[38,"XYZ",72,537.852,null]'>Encoding instructions</a></li></ul></li><li><a class="l" href="#pf28" data-dest-detail='[40,"XYZ",72,733.028,null]'>Assembly, object, and executable files</a><ul><li><a class="l" href="#pf28" data-dest-detail='[40,"XYZ",72,499.888,null]'>Generating native programs</a><ul><li><a class="l" href="#pf2a" data-dest-detail='[42,"XYZ",72,197.032,null]'>Inspecting the contents of object and executable files</a></li></ul></li><li><a class="l" href="#pf2b" data-dest-detail='[43,"XYZ",72,682.205,null]'>Labels, symbols, references, and relocation</a><ul><li><a class="l" href="#pf2b" data-dest-detail='[43,"XYZ",72,653.554,null]'>Labels and symbols</a></li><li><a class="l" href="#pf2c" data-dest-detail='[44,"XYZ",72,427.556,null]'>References to labels and relocation</a></li><li><a class="l" href="#pf2e" data-dest-detail='[46,"XYZ",72,358.469,null]'>Undefined references</a></li><li><a class="l" href="#pf2f" data-dest-detail='[47,"XYZ",72,399.053,null]'>Global vs local symbols</a></li><li><a class="l" href="#pf30" data-dest-detail='[48,"XYZ",72,683.277,null]'>The program entry point</a></li></ul></li><li><a class="l" href="#pf31" data-dest-detail='[49,"XYZ",72,183.796,null]'>Program sections</a></li><li><a class="l" href="#pf35" data-dest-detail='[53,"XYZ",72,432.679,null]'>Executable vs object files</a></li></ul></li><li><a class="l" href="#pf36" data-dest-detail='[54,"XYZ",72,733.028,null]'>Assembly language</a><ul><li><a class="l" href="#pf38" data-dest-detail='[56,"XYZ",72,733.028,null]'>Comments</a></li><li><a class="l" href="#pf38" data-dest-detail='[56,"XYZ",72,254.161,null]'>Assembly instructions</a></li><li><a class="l" href="#pf39" data-dest-detail='[57,"XYZ",72,484.053,null]'>Immediate values</a></li><li><a class="l" href="#pf39" data-dest-detail='[57,"XYZ",72,153.597,null]'>Symbol names</a></li><li><a class="l" href="#pf3a" data-dest-detail='[58,"XYZ",72,470.264,null]'>Labels</a></li><li><a class="l" href="#pf3b" data-dest-detail='[59,"XYZ",72,518.084,null]'>The location counter and the assembling process</a></li><li><a class="l" href="#pf3c" data-dest-detail='[60,"XYZ",72,241.867,null]'>Assembly directives</a><ul><li><a class="l" href="#pf3d" data-dest-detail='[61,"XYZ",72,317.154,null]'>Adding values to the program</a></li><li><a class="l" href="#pf40" data-dest-detail='[64,"XYZ",72,455.581,null]'>The .section directive</a></li><li><a class="l" href="#pf41" data-dest-detail='[65,"XYZ",72,666.672,null]'>Allocating variables on the .bss section</a></li><li><a class="l" href="#pf42" data-dest-detail='[66,"XYZ",72,733.028,null]'>The .set and .equ directives</a></li><li><a class="l" href="#pf42" data-dest-detail='[66,"XYZ",72,488.591,null]'>The .globl directive</a></li><li><a class="l" href="#pf42" data-dest-detail='[66,"XYZ",72,266.514,null]'>The .align directive</a></li></ul></li></ul></li></ul></li><li><a class="l" href="#pf45" data-dest-detail='[69,"XYZ",72,540.919,null]'>II User-level programming</a><ul><li><a class="l" href="#pf47" data-dest-detail='[71,"XYZ",72,733.028,null]'>The RV32I ISA</a><ul><li><a class="l" href="#pf48" data-dest-detail='[72,"XYZ",72,570.07,null]'>Datatypes and memory organization</a></li><li><a class="l" href="#pf49" data-dest-detail='[73,"XYZ",72,473.51,null]'>RV32I registers</a></li><li><a class="l" href="#pf49" data-dest-detail='[73,"XYZ",72,287.513,null]'>Load/Store architecture</a></li><li><a class="l" href="#pf4a" data-dest-detail='[74,"XYZ",72,302.336,null]'>Pseudo-instructions</a></li><li><a class="l" href="#pf4b" data-dest-detail='[75,"XYZ",72,681.651,null]'>Logic, shift, and arithmetic instructions</a><ul><li><a class="l" href="#pf4b" data-dest-detail='[75,"XYZ",72,618.492,null]'>Instructions syntax and operands</a></li><li><a class="l" href="#pf4b" data-dest-detail='[75,"XYZ",72,255.334,null]'>Dealing with large immediate values</a></li><li><a class="l" href="#pf4c" data-dest-detail='[76,"XYZ",72,312.529,null]'>Logic instructions</a></li><li><a class="l" href="#pf4d" data-dest-detail='[77,"XYZ",72,468.358,null]'>Shift instructions</a></li><li><a class="l" href="#pf50" data-dest-detail='[80,"XYZ",72,647.412,null]'>Arithmetic instructions</a></li></ul></li><li><a class="l" href="#pf51" data-dest-detail='[81,"XYZ",72,515.49,null]'>Data movement instructions</a><ul><li><a class="l" href="#pf52" data-dest-detail='[82,"XYZ",72,542.51,null]'>Load instructions</a></li><li><a class="l" href="#pf55" data-dest-detail='[85,"XYZ",72,519.05,null]'>Store instructions</a></li><li><a class="l" href="#pf56" data-dest-detail='[86,"XYZ",72,270.861,null]'>Data movement pseudo-instructions</a></li></ul></li><li><a class="l" href="#pf57" data-dest-detail='[87,"XYZ",72,279.714,null]'>Control-flow instructions</a><ul><li><a class="l" href="#pf58" data-dest-detail='[88,"XYZ",72,626.629,null]'>Conditional control-flow instructions</a></li><li><a class="l" href="#pf5a" data-dest-detail='[90,"XYZ",72,733.028,null]'>Direct vs indirect control-flow instructions </a></li><li><a class="l" href="#pf5a" data-dest-detail='[90,"XYZ",72,407.896,null]'>Unconditional control-flow instructions</a></li><li><a class="l" href="#pf5c" data-dest-detail='[92,"XYZ",72,678.354,null]'>System calls</a></li></ul></li><li><a class="l" href="#pf5c" data-dest-detail='[92,"XYZ",72,167.122,null]'>Conditional set instructions</a></li><li><a class="l" href="#pf5d" data-dest-detail='[93,"XYZ",72,343.076,null]'>Detecting overflow</a></li><li><a class="l" href="#pf5e" data-dest-detail='[94,"XYZ",72,529.971,null]'>Arithmetic on multi-word variables</a></li></ul></li><li><a class="l" href="#pf5f" data-dest-detail='[95,"XYZ",72,733.028,null]'>Controlling the execution flow</a><ul><li><a class="l" href="#pf5f" data-dest-detail='[95,"XYZ",72,507.803,null]'>Conditional statements</a><ul><li><a class="l" href="#pf5f" data-dest-detail='[95,"XYZ",72,480.005,null]'>if-then statements</a></li><li><a class="l" href="#pf60" data-dest-detail='[96,"XYZ",72,733.028,null]'>Comparing signed vs unsigned variables</a></li><li><a class="l" href="#pf60" data-dest-detail='[96,"XYZ",72,580.742,null]'>if-then-else statements</a></li><li><a class="l" href="#pf61" data-dest-detail='[97,"XYZ",72,733.028,null]'>Handling non-trivial boolean expressions</a></li><li><a class="l" href="#pf62" data-dest-detail='[98,"XYZ",72,622.547,null]'>Nested if statements</a></li></ul></li><li><a class="l" href="#pf63" data-dest-detail='[99,"XYZ",72,682.34,null]'>Repetition statements</a><ul><li><a class="l" href="#pf63" data-dest-detail='[99,"XYZ",72,616.827,null]'>while loop</a></li><li><a class="l" href="#pf63" data-dest-detail='[99,"XYZ",72,146.18,null]'>do-while loop</a></li><li><a class="l" href="#pf64" data-dest-detail='[100,"XYZ",72,344.588,null]'>for loop</a></li><li><a class="l" href="#pf65" data-dest-detail='[101,"XYZ",72,509.994,null]'>Hoisting loop-invariant code</a></li></ul></li><li><a class="l" href="#pf65" data-dest-detail='[101,"XYZ",72,153.597,null]'>Invoking and returning from routines</a><ul><li><a class="l" href="#pf66" data-dest-detail='[102,"XYZ",72,256.832,null]'>Returning values from functions</a></li></ul></li><li><a class="l" href="#pf67" data-dest-detail='[103,"XYZ",72,733.028,null]'>Examples</a><ul><li><a class="l" href="#pf67" data-dest-detail='[103,"XYZ",72,710.41,null]'>Searching for the maximum value on an array</a></li></ul></li></ul></li><li><a class="l" href="#pf69" data-dest-detail='[105,"XYZ",72,733.028,null]'>Implementing routines</a><ul><li><a class="l" href="#pf69" data-dest-detail='[105,"XYZ",72,553.862,null]'>The program memory layout</a></li><li><a class="l" href="#pf6a" data-dest-detail='[106,"XYZ",72,733.028,null]'>The program stack</a><ul><li><a class="l" href="#pf6c" data-dest-detail='[108,"XYZ",72,423.509,null]'>Types of stacks</a></li></ul></li><li><a class="l" href="#pf6d" data-dest-detail='[109,"XYZ",72,658.217,null]'>The ABI and software composition</a></li><li><a class="l" href="#pf6d" data-dest-detail='[109,"XYZ",72,199.028,null]'>Passing parameters to and returning values from routines</a><ul><li><a class="l" href="#pf6d" data-dest-detail='[109,"XYZ",72,172.026,null]'>Passing parameters to routines</a></li><li><a class="l" href="#pf6f" data-dest-detail='[111,"XYZ",72,232.717,null]'>Returning values from routines</a></li></ul></li><li><a class="l" href="#pf6f" data-dest-detail='[111,"XYZ",72,159.52,null]'>Value and reference parameters</a></li><li><a class="l" href="#pf71" data-dest-detail='[113,"XYZ",72,566.754,null]'>Global vs local variables</a><ul><li><a class="l" href="#pf72" data-dest-detail='[114,"XYZ",72,508.278,null]'>Allocating local variables on memory</a></li></ul></li><li><a class="l" href="#pf74" data-dest-detail='[116,"XYZ",72,305.369,null]'>Register usage policies</a><ul><li><a class="l" href="#pf76" data-dest-detail='[118,"XYZ",72,564.985,null]'>Caller-saved vs callee-saved registers</a></li><li><a class="l" href="#pf76" data-dest-detail='[118,"XYZ",72,217.614,null]'>Saving and restoring the return address</a></li></ul></li><li><a class="l" href="#pf77" data-dest-detail='[119,"XYZ",72,388.798,null]'>Stack frames and the frame pointer</a><ul><li><a class="l" href="#pf77" data-dest-detail='[119,"XYZ",72,360.147,null]'>Stack frames</a></li><li><a class="l" href="#pf77" data-dest-detail='[119,"XYZ",72,209.234,null]'>The frame pointer</a></li><li><a class="l" href="#pf79" data-dest-detail='[121,"XYZ",72,401.598,null]'>Keeping the stack pointer aligned</a></li></ul></li><li><a class="l" href="#pf79" data-dest-detail='[121,"XYZ",72,280.026,null]'>Implementing RISC-V ilp32 compatible routines</a></li><li><a class="l" href="#pf7a" data-dest-detail='[122,"XYZ",72,383.049,null]'>Examples</a><ul><li><a class="l" href="#pf7a" data-dest-detail='[122,"XYZ",72,329.631,null]'>Recursive routines</a></li><li><a class="l" href="#pf7b" data-dest-detail='[123,"XYZ",72,387.65,null]'>The standard ``C&apos;&apos; library syscall routines</a></li></ul></li></ul></li></ul></li><li><a class="l" href="#pf7d" data-dest-detail='[125,"XYZ",72,540.919,null]'>III System-level programming</a><ul><li><a class="l" href="#pf7e" data-dest-detail='[126,"XYZ",72,733.028,null]'>Accessing peripherals</a><ul><li><a class="l" href="#pf7e" data-dest-detail='[126,"XYZ",72,386.314,null]'>Peripherals</a></li><li><a class="l" href="#pf80" data-dest-detail='[128,"XYZ",72,733.028,null]'>Interacting with peripherals</a><ul><li><a class="l" href="#pf80" data-dest-detail='[128,"XYZ",72,338.667,null]'>Port-mapped I/O</a></li><li><a class="l" href="#pf81" data-dest-detail='[129,"XYZ",72,582.847,null]'>Memory-mapped I/O</a></li></ul></li><li><a class="l" href="#pf81" data-dest-detail='[129,"XYZ",72,342.28,null]'>I/O operations on RISC-V</a></li><li><a class="l" href="#pf83" data-dest-detail='[131,"XYZ",72,546.921,null]'>Busy waiting</a></li></ul></li><li><a class="l" href="#pf85" data-dest-detail='[133,"XYZ",72,733.028,null]'>External interrupts</a><ul><li><a class="l" href="#pf85" data-dest-detail='[133,"XYZ",72,553.862,null]'>Introduction</a><ul><li><a class="l" href="#pf87" data-dest-detail='[135,"XYZ",72,733.028,null]'>Polling</a></li></ul></li><li><a class="l" href="#pf87" data-dest-detail='[135,"XYZ",72,215.585,null]'>External interrupts</a><ul><li><a class="l" href="#pf88" data-dest-detail='[136,"XYZ",72,359.608,null]'>Detecting external interrupts</a></li><li><a class="l" href="#pf89" data-dest-detail='[137,"XYZ",72,394.665,null]'>Invoking the proper interrupt service routine</a></li></ul></li><li><a class="l" href="#pf8b" data-dest-detail='[139,"XYZ",72,419.899,null]'>Interrupts on RV32I</a><ul><li><a class="l" href="#pf8b" data-dest-detail='[139,"XYZ",72,304.492,null]'>Control and status registers</a></li><li><a class="l" href="#pf8c" data-dest-detail='[140,"XYZ",72,566.498,null]'>Interrupt related control and status registers</a></li><li><a class="l" href="#pf8d" data-dest-detail='[141,"XYZ",72,305.543,null]'>Interrupt handling flow</a></li><li><a class="l" href="#pf8e" data-dest-detail='[142,"XYZ",72,316.807,null]'>Implementing an interrupt service routine</a></li><li><a class="l" href="#pf8f" data-dest-detail='[143,"XYZ",72,241.753,null]'>Setting up the interrupt handling mechanism</a></li></ul></li></ul></li><li><a class="l" href="#pf92" data-dest-detail='[146,"XYZ",72,733.028,null]'>Software interrupts and exceptions</a><ul><li><a class="l" href="#pf92" data-dest-detail='[146,"XYZ",72,422.18,null]'>Privilege levels</a></li><li><a class="l" href="#pf93" data-dest-detail='[147,"XYZ",72,609.92,null]'>Protecting the system</a></li><li><a class="l" href="#pf93" data-dest-detail='[147,"XYZ",72,191.074,null]'>Exceptions</a></li><li><a class="l" href="#pf94" data-dest-detail='[148,"XYZ",72,380.941,null]'>Software interrupts</a></li><li><a class="l" href="#pf94" data-dest-detail='[148,"XYZ",72,196.721,null]'>Protecting RISC-V systems</a><ul><li><a class="l" href="#pf95" data-dest-detail='[149,"XYZ",72,230.114,null]'>Changing the privilege mode</a></li><li><a class="l" href="#pf96" data-dest-detail='[150,"XYZ",72,540.853,null]'>Configuring the exception and software interrupt mechanisms</a></li><li><a class="l" href="#pf96" data-dest-detail='[150,"XYZ",72,325.266,null]'>Handling illegal operations</a></li><li><a class="l" href="#pf97" data-dest-detail='[151,"XYZ",72,495.979,null]'>Handling system calls</a></li></ul></li></ul></li><li><a class="l" href="#pf99" data-dest-detail='[153,"XYZ",72,733.028,null]'>RV32IM registers and assembly instructions</a></li></ul></li></ul>